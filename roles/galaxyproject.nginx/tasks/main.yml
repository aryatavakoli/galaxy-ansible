---
# main tasks file for galaxyprojectdotorg.nginx

- include: apt.yml
  when: ansible_os_family == "Debian"

- include: yum.yml
  when: ansible_os_family == "RedHat"

- include: pkgin.yml
  when: ansible_pkg_mgr == "pkgin"

- name: Create supervisor config
  become: yes
  become_user: root
  template:
    src: supervisor-nginx.ini.j2
    dest: "{{ supervisord_conf_dir }}/nginx.ini"
  notify:
    - update supervisord
  when: nginx_supervisor and supervisord_conf_dir is defined

- name: Install vhost configs
  become: yes
  become_user: root
  template:
    src: templates/{{ item }}.j2
    dest: "{{ nginx_conf_dir }}/sites-available/{{ item }}"
    mode: 0444
    backup: yes
  with_items: "{{ nginx_configs }}"
  notify:
    - supervisorctl restart nginx

- name: Enable vhosts
  become: yes
  become_user: root
  file:
    src: "{{ nginx_conf_dir }}/sites-available/{{ item }}"
    dest: "{{ nginx_conf_dir }}/sites-enabled/{{ item }}"
    state: link
  with_items: "{{ nginx_configs }}"
  notify:
    - supervisorctl restart nginx

- name: Set additional config options
  template:
    src: http_options.conf.j2
    dest: "{{ nginx_conf_dir }}/conf.d/http_options.conf"
    mode: 0444
    backup: yes
  when: nginx_conf_http is defined
  notify:
    - restart nginx
    - supervisorctl restart nginx

- name: Copy additional configs
  template:
    src: "templates/{{ item }}.j2"
    dest: "{{ nginx_conf_dir }}/{{ item }}"
    mode: 0444
    backup: yes
  with_items: "{{ nginx_extra_configs | default([]) }}"
  when: nginx_extra_configs is defined

- name: Copy report.pass
  become: yes
  become_user: "{{ galaxy_user }}"
  copy:
    src: "files/report.pass"
    dest: "{{ galaxy_common_dir }}/report.pass"
    owner: "{{ galaxy_user }}"
    group: "{{ galaxy_user_group }}"

- name: Configure server-wide SSL
  template:
    src: ssl.conf.j2
    dest: "{{ nginx_conf_dir }}/conf.d/ssl.conf"
    mode: 0444
    backup: yes
  when: nginx_conf_ssl_certificate is defined and nginx_conf_ssl_certificate_key is defined
  notify:
    - restart nginx
    - supervisorctl restart nginx

- name: Create SSL directories
  file:
    path: "{{ item | dirname }}"
    state: directory
    mode: 0755
  with_items:
    # it shouldn't be necessary to default these but Ansible templates these
    # before checking the conditional below
    - "{{ nginx_conf_ssl_certificate | default('') }}"
    - "{{ nginx_conf_ssl_certificate_key | default('') }}"
  when: nginx_conf_ssl_certificate is defined and nginx_conf_ssl_certificate_key is defined

- name: Install SSL certificate
  copy:
    src: "{{ nginx_ssl_src_dir }}/{{ nginx_conf_ssl_certificate | basename }}"
    dest: "{{ nginx_conf_ssl_certificate }}"
  when: nginx_conf_ssl_certificate is defined

- name: Install SSL private key
  copy:
    content: "{{ sslkeys[nginx_conf_ssl_certificate_key | basename] }}"
    dest: "{{ nginx_conf_ssl_certificate_key }}"
    mode: 0400
  when: nginx_conf_ssl_certificate_key is defined

- name: Set upload_store permissions
  become: yes
  become_user: root
  file:
    path: "/tmp/upload_store"
    state: directory
    owner: www-data
    group: "{{ galaxy_user_group }}"
    mode: 02770

- name: grant permission for upload_store
  become: yes
  become_user: root
  command: chcon -t httpd_sys_rw_content_t .
  args:
   chdir: "/tmp/upload_store"

- name: grant permission for galaxy to run
  become: yes
  become_user: root
  command: setsebool -P httpd_can_network_connect 1

- name: grant permission for gninx to use Drives
  become: yes
  become_user: root
  command: setsebool -P httpd_use_nfs 1

- name: grant firewalld permissions for galaxy to run
  become: yes
  become_user: root
  command: firewall-cmd --permanent --add-port=8080/tcp

- name: grant firewalld permissions for galaxy to run from 80
  become: yes
  become_user: root
  command: firewall-cmd --permanent --add-port=80/tcp

- name: restart firewalld
  become: yes
  become_user: root
  command: firewall-cmd --reload
    
- name: update supervisor
  command: /usr/bin/supervisorctl update
  ignore_errors: yes

- name: Enable nginx (supervisor)
  supervisorctl:
    name: "{{ nginx_supervisor_service_name }}"
    state: started
    config: "{{ supervisord_conf_path | default(omit) }}"
    supervisorctl_path: "{{ supervisord_prefix }}/bin/supervisorctl"
  when: nginx_supervisor and supervisord_prefix is defined

- name: Enable nginx (service)
  become: yes
  become_user: root
  service:
   name: nginx
   state: started
   enabled: true
  when: not nginx_supervisor
