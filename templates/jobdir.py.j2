#!/usr/bin/env python

# usage: tojob [ID]
# Return full path to job [ID]'s working directory.
# This script is only designed to be used with the `tojob` alias to change
# the current working directory to the job's working directory.
#
# The `tojob` alias can be used with `tojob [job ID]`. This will set the
# current working directory to that working directory of the job with id
# `[job_ID]`. If no such working directory is found, this program will return
# `/dev/null`, causing `tojob` to print a nice error message.
#
# If the directory does not exist for whatever reason, `/dev/null` will be
# returned.
#
# Error codes are as follows:
# 1: missing argument.
# 2: Found reference to directory in logfile but directory no longer exists.
# 3: Reference to job found in logfile but could not extract its directory.
# 4: No reference to job found in logfile.

from __future__ import print_function
import os
import sys

GALAXY_LOG_DIR = "{{ galaxy_root_dir }}/log/"


def eprint(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)


if len(sys.argv) != 2:  # quit if we don't have the right number of arguments.
    print("usage: {0} [ID]".format(sys.argv[0]), file=sys.stderr)
    print("/dev/null")
    sys.exit(1)
else:
    job_id = sys.argv[1]

log_files = []
job_line = None

# create list of files inside the log directory.
for f in os.listdir(GALAXY_LOG_DIR):
    if os.path.isfile(GALAXY_LOG_DIR + f):
        log_files.append(GALAXY_LOG_DIR + f)


# loop through each line of each file until we find a string that we think
# contains the job's directory. If we find a match, immediately exit the loop.
for f in log_files:
    if f.split(".")[-1] == "log":  # only open the file if it ends in `.log`
        try:
            fp = open(f, "r")
            for l in fp.readlines():
                if "/{0}/tool_script.sh".format(job_id) in l:
                    job_line = l
                    fp.close()
                    break  # stop looking at this file when we find a match.
            fp.close()
        except IOError:
            pass

        if job_line is not None:
            # exit the loop checking files as soon as we find a match.
            break


if job_line is not None:
    try:
        # get the text between the first two square brackets, where the
        # directory should be.
        job_path = job_line.split("[", 1)[1].split("tool_script.sh]", 1)[0]
        if os.path.isdir(job_path):
            print(job_path)  # if it's a valid directory, print it.
        else:
            eprint("Found reference to job directory in logfile, "
                   + "but directory doesn't exist")
            print("/dev/null")
            sys.exit(2)
    except IndexError:
        eprint("Found reference to job directory in logfile, but format of "
               + " line wasn't as expected")
        print("/dev/null")
        sys.exit(3)
else:
    print("/dev/null")
    eprint("No reference to job found in logfiles")
    sys.exit(4)
